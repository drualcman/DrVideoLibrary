@inject IStringLocalizer<ResourceFooter> Localizer
@inject IJSRuntime JS
@inject NavigationManager Navigation
<div class="menu">
    <ul class="menu-list custom-menu">
        <li>
            <NavLink href="" ActiveClass="is-active" Match="NavLinkMatch.All" class="custom-nav-link">
                <span class="icon"><i class="fas fa-film"></i></span>
                <span>@Localizer.GetString(nameof(ResourceFooter.AllMoviesLabel))</span>
            </NavLink>
        </li>
        <li>
            <NavLink href="watchlist" ActiveClass="is-active" Match="NavLinkMatch.All" class="custom-nav-link">
                <span class="icon"><i class="fas fa-list"></i></span>
                <span>@Localizer.GetString(nameof(ResourceFooter.Watchlist))</span>
            </NavLink>
        </li>
        <li>
            <NavLink href="watching" ActiveClass="is-active" Match="NavLinkMatch.All" class="custom-nav-link">
                <span class="icon"><i class="fas fa-eye"></i></span>
                <span>@Localizer.GetString(nameof(ResourceFooter.Watching))</span>
            </NavLink>
        </li> 
        <AuthorizeView>
            <Authorized>
                <li>
                    <NavLink href="add" ActiveClass="is-active" class="custom-nav-link">
                        <span class="icon"><i class="fas fa-plus"></i></span>
                        <span>@Localizer.GetString(nameof(ResourceFooter.AddMoview))</span>
                    </NavLink>
                </li> 
            </Authorized>
        </AuthorizeView>
        <li>
            <div class="select">
                <select @bind="@selectedCulture" @bind:after="ApplySelectedCultureAsync">
                    @foreach (var culture in supportedCultures)
                    {
                        <option value="@culture">@cultureDict[culture.Name]</option>
                    }
                </select>
            </div>
        </li>
    </ul>
</div>

@code
{
    private string? greeting;

    private DateTime dt = DateTime.Now;
    private double number = 1999.69;

    private Dictionary<string, string> cultureDict =
        new()
                {
            { "en-US", "English (United States)" },
            { "es-ES", "Spanish (España)" }
                };

    private CultureInfo[] supportedCultures = new[]
    {
        new CultureInfo("en-US"),
        new CultureInfo("es-ES"),
    };

    private CultureInfo? selectedCulture;

    protected override void OnInitialized()
    {
        selectedCulture = CultureInfo.CurrentCulture;
    }

    private async Task ApplySelectedCultureAsync()
    {
        if (CultureInfo.CurrentCulture != selectedCulture)
        {
            await JS.InvokeVoidAsync("blazorCulture.set", selectedCulture!.Name);

            Navigation.NavigateTo(Navigation.Uri, forceLoad: true);
        }
    }
}
